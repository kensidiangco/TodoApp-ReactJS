{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","newItem","list","key","value","this","setState","id","Math","random","slice","push","updatedList","filter","item","className","class","type","placeholder","onChange","e","updateInput","target","onClick","addItem","map","deleteItem","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"yNAsFeA,E,kDAlFd,WAAYC,GAAO,IAAD,8BACjB,cAAMA,IAEDC,MAAM,CACVC,QAAQ,GACRC,KAAK,IALW,E,wDAQNC,EAAKC,GAChBC,KAAKC,SAAL,eACEH,EAAMC,M,gCAIR,IAAMH,EAAQ,CACbM,GAAI,EAAIC,KAAKC,SACbL,MAAOC,KAAKL,MAAMC,QAAQS,SAGrBR,EAAI,YAAOG,KAAKL,MAAME,MAE5BA,EAAKS,KAAKV,GAEVI,KAAKC,SAAS,CACbJ,OACAD,QAAQ,O,iCAGCM,GACV,IAEMK,EAFK,YAAIP,KAAKL,MAAME,MAEDW,QAAO,SAAAC,GAAI,OAAIA,EAAKP,KAAOA,KAEpDF,KAAKC,SAAS,CAACJ,KAAMU,M,+BAGZ,IAAD,OACR,OACC,yBAAKG,UAAU,OACd,yBAAKC,MAAM,aACV,uBAAGA,MAAM,yBAAT,aACA,6BACA,yBAAKA,MAAM,OACV,yBAAKA,MAAM,YACV,2BACCC,KAAK,OACLC,YAAY,oBACZF,MAAM,eACNZ,MAAOC,KAAKL,MAAMC,QAClBkB,SAAU,SAAAC,GAAC,OAAI,EAAKC,YAAY,UAAWD,EAAEE,OAAOlB,WAGtD,yBAAKY,MAAM,OACV,4BACCA,MAAM,gBACNO,QAAS,kBAAM,EAAKC,YAFrB,SAOI,6BACN,4BACEnB,KAAKL,MAAME,KAAKuB,KAAI,SAAAX,GACpB,OACC,wBAAIE,MAAM,OAAOb,IAAKW,EAAKP,IACzBO,EAAKV,MADP,mBAEC,4BACCY,MAAM,wBACNO,QAAS,kBAAM,EAAKG,WAAWZ,EAAKP,MAFrC,gB,GAnESoB,aCSZC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB3C,QACfqC,UAAUC,cAAcQ,YAI1BC,QAAQC,IACN,iHAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAASR,KAMlBM,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUT,WAO5BU,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MC1FjEC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDYnB,SAAkBrB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIqB,IAAIC,mBAAwB7B,OAAOC,SAAS6B,MACpDC,SAAW/B,OAAOC,SAAS8B,OAIvC,OAGF/B,OAAOgC,iBAAiB,QAAQ,WAC9B,IAAM3B,EAAK,UAAMwB,mBAAN,sBAEP/B,IAgEV,SAAiCO,EAAOC,GAEtC2B,MAAM5B,EAAO,CACX6B,QAAS,CAAE,iBAAkB,YAE5BxB,MAAK,SAAAyB,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5ChC,UAAUC,cAAcgC,MAAM9B,MAAK,SAAAC,GACjCA,EAAa8B,aAAa/B,MAAK,WAC7BV,OAAOC,SAASyC,eAKpBtC,EAAgBC,EAAOC,MAG1Be,OAAM,WACLJ,QAAQC,IACN,oEAvFAyB,CAAwBtC,EAAOC,GAI/BC,UAAUC,cAAcgC,MAAM9B,MAAK,WACjCO,QAAQC,IACN,iHAMJd,EAAgBC,EAAOC,OClC/BE,I","file":"static/js/main.37b3bee9.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\n\r\nclass App extends Component {\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state={\r\n\t\t\tnewItem:\"\",\r\n\t\t\tlist:[]\r\n\t\t}\r\n\t}\r\n\tupdateInput(key, value){\r\n\t\tthis.setState({\r\n\t\t\t[key]: value\r\n\t\t});\r\n\t}\r\n\taddItem(){\r\n\t\tconst newItem={\r\n\t\t\tid: 1 + Math.random(),\r\n\t\t\tvalue: this.state.newItem.slice()\r\n\t\t};\r\n\r\n\t\tconst list = [...this.state.list];\r\n\r\n\t\tlist.push(newItem);\r\n\r\n\t\tthis.setState({\r\n\t\t\tlist,\r\n\t\t\tnewItem:\"\"\r\n\t\t});\r\n\t}\r\n\tdeleteItem(id){\r\n\t\tconst list=[...this.state.list];\r\n\r\n\t\tconst updatedList = list.filter(item => item.id !== id);\r\n\r\n\t\tthis.setState({list: updatedList});\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"App\">\r\n\t\t\t\t<div class=\"container\">\r\n\t\t\t\t\t<p class=\"display-2 text-center\">TODO LIST</p>\r\n\t\t\t\t\t<br/>\r\n\t\t\t\t\t<div class=\"row\">\r\n\t\t\t\t\t\t<div class=\"col-md-4\">\r\n\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\t\tplaceholder=\"Type todo here...\"\r\n\t\t\t\t\t\t\t\tclass=\"form-control\"\r\n\t\t\t\t\t\t\t\tvalue={this.state.newItem}\r\n\t\t\t\t\t\t\t\tonChange={e => this.updateInput(\"newItem\", e.target.value)} \r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col\">\r\n\t\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\t\tclass=\"btn btn-light\"\r\n\t\t\t\t\t\t\t\tonClick={() => this.addItem()}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\tAdd\r\n\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div><hr/>\r\n\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t{this.state.list.map(item =>{\r\n\t\t\t\t\t\t\treturn(\r\n\t\t\t\t\t\t\t\t<li class=\"lead\" key={item.id}>\r\n\t\t\t\t\t\t\t\t\t{item.value}&nbsp;&nbsp;&nbsp;&nbsp;\r\n\t\t\t\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\t\t\t\tclass='btn btn-danger btn-sm'\r\n\t\t\t\t\t\t\t\t\t\tonClick={() => this.deleteItem(item.id)}\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\tX\r\n\t\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t})}\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}